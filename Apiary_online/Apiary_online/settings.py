"""
Django settings for Apiary_online project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# ▲ BASE_DIR переменная, которая получает директорию в которой расположен manage.py
# Трансляция 2022.03.23 1:15:01

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
from .keys.key_django import SECRET_KEY
"""
SECRET_KEY = ''
Moved 27.10.2022 15:40 to a file "key_django" before the zero commit
"""

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'scales_apiary.apps.ScalesApiaryConfig',
    'django.contrib.humanize',
]

# 'django.contrib.humanize', добавлен 17.02.2023
# для разделения запятой классов многозначных чисел при выводе в шаблоне

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Apiary_online.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Apiary_online.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# read_pgpass added 04.11.2022
"""
    Reads the pgpass. Returns the postgres settings dict for Django.

    :param str dbname:
    :return dict:
    """

from .path.path_psql_key import PGPASS

def read_pgpass(pgpass, dbname):

    try:
        pgpass_lines = open(pgpass).read().split()
    except IOError:
        print(
            """
            You don't have a ~/.pgpass file so we're using a sqlite database.

            To switch to a PostgreSQL database, create a ~/.pgpass file
            containing it's credentials.
            See http://www.postgresql.org/docs/14/static/libpq-pgpass.html
            """
            )
    else:
        for line in pgpass_lines:
            words = line.strip().split(':')
            if words[2] == dbname:
                return {
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    # 'PORT': ????
                    'HOST': words[0],
                    'NAME': dbname,
                    'USER': words[3],
                    'PASSWORD': words[4],

                }
        print ('No such database ' + dbname + ' in your pgpass file')
    return {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }

DATABASES = {
    'default': read_pgpass(PGPASS, 'apiary_online')
}

"""
04.11.2022 ▼ (-)
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    {
"""

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False # ◄ поддержка часового пояса отключена 18.01.2023
# USE_TZ = True # ◄ поддержка часового пояса включена (начальный вариант)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# STATIC_URL = 'static/' # ◄ начальный вариант
STATIC_URL = '/static/'
STATICFILES_DIRS = [
 os.path.join(BASE_DIR, 'static'),
]
# ▲ Подключение статического контента 19.01.2023

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'